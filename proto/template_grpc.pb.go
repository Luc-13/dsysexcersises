// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TempClient is the client API for Temp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TempClient interface {
	Increase(ctx context.Context, in *Amount, opts ...grpc.CallOption) (*Ack, error)
	Greet(ctx context.Context, opts ...grpc.CallOption) (Temp_GreetClient, error)
}

type tempClient struct {
	cc grpc.ClientConnInterface
}

func NewTempClient(cc grpc.ClientConnInterface) TempClient {
	return &tempClient{cc}
}

func (c *tempClient) Increase(ctx context.Context, in *Amount, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/proto.temp/Increase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tempClient) Greet(ctx context.Context, opts ...grpc.CallOption) (Temp_GreetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Temp_ServiceDesc.Streams[0], "/proto.temp/Greet", opts...)
	if err != nil {
		return nil, err
	}
	x := &tempGreetClient{stream}
	return x, nil
}

type Temp_GreetClient interface {
	Send(*Msg) error
	CloseAndRecv() (*MsgBack, error)
	grpc.ClientStream
}

type tempGreetClient struct {
	grpc.ClientStream
}

func (x *tempGreetClient) Send(m *Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tempGreetClient) CloseAndRecv() (*MsgBack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MsgBack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TempServer is the server API for Temp service.
// All implementations must embed UnimplementedTempServer
// for forward compatibility
type TempServer interface {
	Increase(context.Context, *Amount) (*Ack, error)
	Greet(Temp_GreetServer) error
	mustEmbedUnimplementedTempServer()
}

// UnimplementedTempServer must be embedded to have forward compatible implementations.
type UnimplementedTempServer struct {
}

func (UnimplementedTempServer) Increase(context.Context, *Amount) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increase not implemented")
}
func (UnimplementedTempServer) Greet(Temp_GreetServer) error {
	return status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedTempServer) mustEmbedUnimplementedTempServer() {}

// UnsafeTempServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TempServer will
// result in compilation errors.
type UnsafeTempServer interface {
	mustEmbedUnimplementedTempServer()
}

func RegisterTempServer(s grpc.ServiceRegistrar, srv TempServer) {
	s.RegisterService(&Temp_ServiceDesc, srv)
}

func _Temp_Increase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Amount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TempServer).Increase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.temp/Increase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TempServer).Increase(ctx, req.(*Amount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Temp_Greet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TempServer).Greet(&tempGreetServer{stream})
}

type Temp_GreetServer interface {
	SendAndClose(*MsgBack) error
	Recv() (*Msg, error)
	grpc.ServerStream
}

type tempGreetServer struct {
	grpc.ServerStream
}

func (x *tempGreetServer) SendAndClose(m *MsgBack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tempGreetServer) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Temp_ServiceDesc is the grpc.ServiceDesc for Temp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Temp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.temp",
	HandlerType: (*TempServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Increase",
			Handler:    _Temp_Increase_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Greet",
			Handler:       _Temp_Greet_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/template.proto",
}
